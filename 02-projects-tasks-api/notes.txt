Set up basic server 
make mongodb
set up schemas
create folder for routes and controllers
start with contrllers first, then routes, then mount

after making get and post, i was struggling a bit cause i started using thunder client. realised i needed:
    app.use(express.json());
in the middle ware, and bam it works

post for user: registration and login
    registration
        require password to have minimum length 
    login 

    bcrypt
        terminal : npm i bcrypt
        to hash password we need to create a salt, and then use that salt along with password to create a hashed password
            bcrypt takes care of this for us

    user.controllers
        require bcrypt
        bcrypt used for hashing passwords; needs salt so that if there are passwords that are the same, they get hashed differently.
        when logging in, must find username within database by using findOne. findOne requires {fieldName: value}
        after finding username, must compare password input with the hashedpassword in database by using bycrypt.compare. uses same salt thats in the hash
        
allow relationships between user and projects, make it so that user is not able to access projects of another user

added middleware isOwner to check if user is owner of project before allowoing post, put, delete options.
    isOwnder decides if this caller is allowed to perform the action
        uses req.user (which devAuth put there), loads the porject from DB, compares project.userId with req.user._id, if they match alllow, if not rejects
        doesnt care how you authenticate, just enforeces permission rule
        "You can't walk into this private room unless your name is on the lease"
added devAuth 
    dev auth figures out who the caller is 
        reads X-User-Id header, checks if its a valid MongoDB ObjectId, finds user in database, if it'svalid attaches user id to req.user, if not rejects
        "Show me your id at the door so i know who you are"

made it so that in the project routes, it runs devAuth for post, put, and delete, and isOwner for put and delete

goal: make it so that u cant create,update,delete tasks unless you're ownner


Testing:

using thunder client
{
    "title": "", 
    "body": "Noffin", 
    "author": "NoName"
}